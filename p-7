Perfect! Let's add category management and polish the app! ðŸŽ¨

---

# ðŸŽ¯ STEP 7: Category Management & Polish Features

## Part A: Create Category Management Page

**Open `app/(auth)/dashboard/categories/page.tsx`:**

**Copilot prompt:**

```
Create a Category Management page:

1. Use "use client" directive
2. Import:
   - useState from react
   - api from lib/trpc
   - Button from components/ui/button
   - Card, CardHeader, CardContent from components/ui/card
   - Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle from components/ui/dialog
   - Input, Label from components/ui/input & label
   - Textarea from components/ui/textarea
   - Badge from components/ui/badge
   - AlertDialog components from components/ui/alert-dialog
   - toast from sonner
   - Plus, Edit, Trash2, Folder icons from lucide-react

3. State management:
   - editingCategory: Category | null
   - deleteConfirmId: string | null
   - isDialogOpen: boolean
   - formData: { name: string, description: string }

4. Fetch categories: api.category.list.useQuery()

5. Mutations:
   - createMutation: api.category.create.useMutation()
   - updateMutation: api.category.update.useMutation()
   - deleteMutation: api.category.delete.useMutation()

6. Page layout:
   - Header with "Manage Categories" title
   - "Add New Category" button (opens dialog)
   - Grid of category cards:
     - Category name + slug
     - Description
     - Post count (bonus - needs aggregation)
     - Edit button
     - Delete button
   - Empty state if no categories

7. Add/Edit Dialog:
   - Modal form with:
     - Name input (required)
     - Description textarea (optional)
     - Auto-generate slug preview
     - Cancel button
     - Save button (shows loading)
   - Validate name is not empty
   - On submit: create or update category
   - Show toast on success/error
   - Refetch categories after success
   - Close dialog

8. Delete Confirmation:
   - AlertDialog asking "Are you sure?"
   - Warning: "This will remove the category from all posts"
   - Cancel button
   - Delete button (destructive variant)
   - Show toast on success/error
   - Refetch after delete

9. Style with Tailwind:
   - Card-based layout for categories
   - Responsive grid
   - Hover effects
   - Loading states

10. Add proper TypeScript types
11. Export as default
```

---

## Part B: Add Post Count to Categories

**Update `server/api/routers/category.ts`:**

**Copilot prompt:**

```
Update the category list procedure to include post counts:

1. Import sql from drizzle-orm
2. Import postCategories table from schema

3. In the list procedure:
   - Use a subquery or join to count posts per category
   - Return categories with postCount field
   - Use Drizzle's count() aggregation
   - Example:
     ```
     const categoriesWithCounts = await db
       .select({
         ...categories,
         postCount: sql<number>`count(${postCategories.categoryId})`
       })
       .from(categories)
       .leftJoin(postCategories, eq(categories.id, postCategories.categoryId))
       .groupBy(categories.id)
     ```

4. Return array with postCount for each category
5. Update TypeScript return type to include postCount

Keep all existing functionality.
```

---

## Part C: Add Optimistic Updates to Dashboard

**Update `app/(auth)/dashboard/page.tsx`:**

**Copilot prompt:**

```
Add optimistic updates to the dashboard delete functionality:

1. Import useQueryClient from @tanstack/react-query
2. Get queryClient instance

3. Update delete mutation to use onMutate for optimistic update:
   ```
   const deleteMutation = api.post.delete.useMutation({
     onMutate: async (deletedId) => {
       // Cancel outgoing refetches
       await queryClient.cancelQueries(['post', 'getUserPosts']);
       
       // Snapshot previous value
       const previousPosts = queryClient.getQueryData(['post', 'getUserPosts']);
       
       // Optimistically update
       queryClient.setQueryData(['post', 'getUserPosts'], (old) =>
         old?.filter((post) => post.id !== deletedId)
       );
       
       return { previousPosts };
     },
     onError: (err, deletedId, context) => {
       // Rollback on error
       queryClient.setQueryData(['post', 'getUserPosts'], context.previousPosts);
       toast.error('Failed to delete post');
     },
     onSuccess: () => {
       toast.success('Post deleted successfully');
     }
   });
   ```

4. Apply same pattern to category management page
5. This makes UI feel instant when deleting
```

---

## Part D: Add Pagination to Blog Listing

**Update `app/(public)/blogs/page.tsx`:**

**Copilot prompt:**

```
Add pagination to the blog listing page:

1. Import Button from components/ui/button

2. Update state to track:
   - currentPage: number
   - hasMore: boolean

3. Update the query:
   - Calculate offset: (currentPage - 1) * 12
   - Fetch 13 posts (12 to show + 1 to check if more exist)
   - If 13 returned, hasMore = true and only show 12
   - If less than 13, hasMore = false

4. Add pagination UI at bottom:
   - If currentPage > 1: "Previous" button
   - Page indicator: "Page X"
   - If hasMore: "Next" button
   - Disable buttons when loading

5. Handle page changes:
   - Update currentPage state
   - Scroll to top of page
   - Show loading state during fetch

6. Style pagination:
   - Centered
   - Clean button design
   - Proper spacing

Alternative: "Load More" button instead of page numbers
```

---

## Part E: Add Reading Time to Posts

**Update `lib/utils.ts`:**

**Copilot prompt:**

```
Ensure calculateReadingTime function exists in utils:

1. If not already present, add:
   ```typescript
   export function calculateReadingTime(content: string): string {
     const wordsPerMinute = 200;
     const wordCount = content.split(/\s+/).filter(Boolean).length;
     const minutes = Math.ceil(wordCount / wordsPerMinute);
     return `${minutes} min read`;
   }
   ```

2. Also add getWordCount function:
   ```typescript
   export function getWordCount(content: string): number {
     return content.split(/\s+/).filter(Boolean).length;
   }
   ```

3. Export both functions
```

**Update PostCard to show reading time:**

**Copilot prompt:**

```
Update PostCard component to display reading time:

1. Import calculateReadingTime from lib/utils
2. Calculate reading time from post.content
3. Add Clock icon with reading time in metadata row
4. Example: "5 min read"

Keep all existing functionality.
```

---

## Part G: Add Empty States Throughout

**Create `components/ui/empty-state.tsx`:**

**Copilot prompt:**

```
Create an EmptyState component for better UX:

1. Import icons from lucide-react
2. Component props:
   - icon?: LucideIcon (default: FileText)
   - title: string
   - description: string
   - action?: { label: string, onClick: () => void }

3. Design:
   - Centered content
   - Large icon (greyed out)
   - Bold title
   - Description text
   - Optional action button
   - Proper spacing

4. Style with Tailwind:
   - Subtle background
   - Rounded container
   - Padding
   - Works in any container

5. Export component
```

**Use EmptyState in:**
- Dashboard (no posts)
- Blog listing (no posts found)
- Category management (no categories)
- Search results (no matches)

---

## Part H: Add Draft/Published Toggle in Dashboard

**Update `app/(auth)/dashboard/page.tsx`:**

**Copilot prompt:**

```
Add filter tabs to dashboard for Draft/Published posts:

1. Import Tabs components from shadcn
2. Add state: activeTab: 'all' | 'published' | 'draft'

3. Add Tabs UI above posts list:
   - Tab: "All Posts"
   - Tab: "Published" (with count badge)
   - Tab: "Drafts" (with count badge)

4. Filter posts based on activeTab:
   - all: show all posts
   - published: filter posts.published === true
   - draft: filter posts.published === false

5. Update displayed posts accordingly
6. Style with Tailwind
```

---

## Part I: Add Quick Publish/Unpublish from Dashboard

**Update `app/(auth)/dashboard/page.tsx`:**

**Copilot prompt:**

```
Add quick publish/unpublish action to dashboard posts:

1. Create mutation: api.post.update.useMutation()

2. Add toggle button to each post card:
   - If published: "Unpublish" button (ghost variant)
   - If draft: "Publish" button (default variant)

3. On click:
   - Call update mutation with id and new published state
   - Show toast on success/error
   - Optimistically update the post in the list
   - Refetch posts

4. Add loading state to button
5. Keep existing edit and delete buttons
```

---

## Part K: Add Loading Skeletons

**Create `components/ui/post-skeleton.tsx`:**

**Copilot prompt:**

```
Create PostSkeleton component for loading states:

1. Import Skeleton from components/ui/skeleton
2. Create component that mimics PostCard layout:
   - Skeleton for image (aspect-ratio-video)
   - Skeleton for title (2 lines)
   - Skeleton for excerpt (3 lines)
   - Skeleton for metadata (badges, date)

3. Export component

Create variant for compact version too.
```

**Use PostSkeleton in:**
- Blog listing page while loading
- Dashboard while loading posts
- Related posts section

---

## Part L: Add Toast Notifications Throughout

**Ensure toasts are used for all actions:**

**Copilot prompt:**

```
Add toast notifications to all mutation actions:

1. Post created: "Post created successfully"
2. Post updated: "Post updated successfully"
3. Post deleted: "Post deleted successfully"
4. Post published: "Post published successfully"
5. Category created: "Category created successfully"
6. Category updated: "Category updated successfully"
7. Category deleted: "Category deleted successfully"
8. Image uploaded: "Image uploaded successfully"
9. Auth success: "Welcome back!" / "Account created!"
10. Errors: Show specific error messages

Use toast.success() and toast.error() from sonner.
Review all mutation handlers and add appropriate toasts.
```

---

## Part M: Polish the UI

**Update `app/globals.css`:**

**Copilot prompt:**

```
Enhance the global styles for Inkwell:

1. Add custom CSS variables for brand colors:
   - --brand-purple: hsl(...)
   - --brand-gradient: linear-gradient(...)

2. Add smooth scroll behavior:
   ```css
   html {
     scroll-behavior: smooth;
   }
   ```

3. Add prose customization for markdown:
   - Better code block styling
   - Larger text for readability
   - Custom link colors
   - Proper heading hierarchy

4. Add custom animations:
   - fadeIn
   - slideUp
   - shimmer (for skeletons)

5. Add focus-visible styles for accessibility

6. Customize scrollbar (webkit):
   - Thin scrollbar
   - Rounded thumb
   - Accent color

Keep all existing Tailwind imports and shadcn styles.
```

---

## âœ… CHECKPOINT 7

You should now have:
- âœ… Category management page (CRUD)
- âœ… Post counts on categories
- âœ… Optimistic updates
- âœ… Pagination on blog listing
- âœ… Reading time on posts
- âœ… Empty states everywhere
- âœ… Draft/Published filters in dashboard
- âœ… Quick publish toggle
- âœ… Loading skeletons
- âœ… Toast notifications everywhere
- âœ… Polished UI

**Test all features:**

1. Category management (create, edit, delete)
2. Dashboard filters (all, published, draft)
3. Quick publish/unpublish
4. Pagination on blog listing
5. Search functionality
6. All loading states
7. All error states
8. Toast notifications
9. Keyboard shortcuts
10. Responsive design on mobile

---

